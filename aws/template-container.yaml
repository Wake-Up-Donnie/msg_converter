AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: EML to PDF Converter - Serverless Application

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod, test]
    Description: Environment name for resource naming

  AppPassword:
    Type: String
    Default: ''
    NoEcho: true
    Description: Optional password for website access (leave empty to disable)

  DomainName:
    Type: String
    Default: ''
    Description: Optional custom domain name for CloudFront (e.g., converter.example.com)

  InlineRemoteImages:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Enable inlining of external http(s) images into PDFs (data URLs). Requires internet egress.

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, '']]
  HasPassword: !Not [!Equals [!Ref AppPassword, '']]

Globals:
  Function:
    Timeout: 900  # 15 minutes for large files and PDF merging
    MemorySize: 3008  # Increased memory for PDF processing
    EphemeralStorage:
      Size: 2048  # 2 GB temporary storage

Resources:
  # S3 Bucket for temporary file storage and session management
  TempFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'eml-converter-temp-${Environment}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteTempFiles
            Status: Enabled
            ExpirationInDays: 1
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedHeaders: ['*']
            MaxAge: 3000

  # S3 Bucket for hosting static frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'eml-converter-frontend-${Environment}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldBuilds
            Status: Enabled
            ExpirationInDays: 30
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # Bucket policy for frontend hosting
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${FrontendBucket}/*'

  # CloudFront Distribution for frontend hosting
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
          - Id: APIOrigin
            DomainName: !Sub '${EMLConverterAPI}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: !Sub '/${Environment}'
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultRootObject: index.html
        Aliases: !If [HasCustomDomain, [!Ref DomainName], !Ref AWS::NoValue]
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
        CacheBehaviors:
          - PathPattern: '/api/*'
            TargetOriginId: APIOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Headers: ['Authorization', 'X-App-Password', 'Content-Type']
              Cookies:
                Forward: none
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0
        Comment: !Sub 'EML Converter - ${Environment}'
        PriceClass: PriceClass_100

  # Dead Letter Queue for failed processing
  ProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'eml-converter-dlq-${Environment}'
      MessageRetentionPeriod: 1209600  # 14 days

  # ECR Repository for Lambda container
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'eml-converter-${Environment}'
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the latest 5 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # Lambda function for EML to PDF conversion
  EMLConverterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'eml-converter-${Environment}'
      PackageType: Image
      ImageUri: 395096735234.dkr.ecr.us-east-1.amazonaws.com/eml-converter-prod:latest
      Environment:
        Variables:
          S3_BUCKET: !Ref TempFilesBucket
          ENVIRONMENT: !Ref Environment
          APP_PASSWORD: !If [HasPassword, !Ref AppPassword, !Ref AWS::NoValue]
          INLINE_REMOTE_IMAGES: !Ref InlineRemoteImages
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref TempFilesBucket
        - CloudWatchLogsFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt ProcessingDLQ.Arn
      Events:
        ConvertAPI:
          Type: Api
          Properties:
            RestApiId: !Ref EMLConverterAPI
            Path: /api/convert
            Method: post
        UploadUrlAPI:
          Type: Api
          Properties:
            RestApiId: !Ref EMLConverterAPI
            Path: /api/upload-url
            Method: post
        ConvertS3API:
          Type: Api
          Properties:
            RestApiId: !Ref EMLConverterAPI
            Path: /api/convert-s3
            Method: post
        HealthAPI:
          Type: Api
          Properties:
            RestApiId: !Ref EMLConverterAPI
            Path: /api/health
            Method: get
        AuthCheckAPI:
          Type: Api
          Properties:
            RestApiId: !Ref EMLConverterAPI
            Path: /api/auth/check
            Method: get
        DownloadAPI:
          Type: Api
          Properties:
            RestApiId: !Ref EMLConverterAPI
            Path: /api/download/{session_id}/{filename}
            Method: get
        DownloadAllAPI:
          Type: Api
          Properties:
            RestApiId: !Ref EMLConverterAPI
            Path: /api/download-all/{session_id}
            Method: get
        TwemojiAPI:
          Type: Api
          Properties:
            RestApiId: !Ref EMLConverterAPI
            Path: /api/twemoji/{filename}
            Method: get

  # API Gateway
  EMLConverterAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'eml-converter-api-${Environment}'
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-App-Password'"
        AllowOrigin: "'*'"
      BinaryMediaTypes:
        - 'multipart/form-data'
        - 'application/pdf'
        - 'application/zip'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: 'OFF'
          DataTraceEnabled: false
          MetricsEnabled: false
      GatewayResponses:
        DEFAULT_4XX:
          ResponseTemplates:
            application/json: '{"message": $context.error.messageString}'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-App-Password'"
              Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        DEFAULT_5XX:
          ResponseTemplates:
            application/json: '{"message": "Internal server error"}'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"

  # CloudWatch Log Group for API Gateway
  APILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/eml-converter-${Environment}'
      RetentionInDays: 30

  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/eml-converter-${Environment}'
      RetentionInDays: 30

Outputs:
  APIGatewayURL:
    Description: 'API Gateway endpoint URL for backend'
    Value: !Sub 'https://${EMLConverterAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-api-url'

  CloudFrontURL:
    Description: 'CloudFront distribution URL for frontend'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-frontend-url'

  CustomDomainURL:
    Condition: HasCustomDomain
    Description: 'Custom domain URL'
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-custom-domain-url'

  S3BucketName:
    Description: 'S3 bucket name for temporary files'
    Value: !Ref TempFilesBucket
    Export:
      Name: !Sub '${AWS::StackName}-bucket-name'

  FrontendBucketName:
    Description: 'S3 bucket name for frontend hosting'
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-frontend-bucket'

  LambdaFunctionName:
    Description: 'Lambda function name'
    Value: !Ref EMLConverterFunction
    Export:
      Name: !Sub '${AWS::StackName}-lambda-function'

  DeploymentCommands:
    Description: 'Commands to deploy frontend to S3'
    Value: !Sub |
      # Deploy React frontend:
      cd frontend && npm run build
      aws s3 sync build/ s3://${FrontendBucket}/ --delete
      
      # Deploy simple frontend:
      aws s3 cp simple-frontend/index.html s3://${FrontendBucket}/simple.html
      
      # Invalidate CloudFront cache:
      aws cloudfront create-invalidation --distribution-id ${CloudFrontDistribution} --paths "/*"
